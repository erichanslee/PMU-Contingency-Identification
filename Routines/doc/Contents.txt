~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~FOLDERS~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- classes
	To be explained in following section

- Contigs
	Contains Contingency Files in PSAT-compliant file format

- data
	Contaings all data to be used by contingency identification routines

- doc
	Documentation folder

- figures
	Contains misc. figures

- legacy
	Old, outdated files still worth keeping

- Observer
	Observer stuff, not working

- reporting
	Folder where automated reports get generated

- tests
	Contains scripts to test contingency identification routines

- unit tests
	Contains scripts for testing correctness of particular subroutines

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~CLASSES~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- Instance
	Problem Instance, contains PMU locations, PMU data, and Contingency Dictionary

- Analysis
	Abstract Class for Contingency Identification Routines

- fd_LS_Analysis
	Stands for Frequency Domain Least Squares Analysis. Contains the standard fd approach, inherits from Analysis abstract class

- td_kroneckerLS_Analysis
	Stands for Time Domain Kronecker Least Squares Analysis. Minimizes (A \kron I - H \kron L)*X = [0; Y]


- td_vandermondeLS_Analysis
	Stands for Time Domain Vandermonde Least Squares Analysis. A similar loss function to td_kroneckerLS_Analysis, but forces the fit to be 
	generated by a time-invariant system exactly (i.e. generated by a Fixed Vandermonde Matrix multiplied by some modes). 

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~FUNCTIONS~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- addtopath.m
	Running addtopath from the Routines subdirectory adds the proper class paths to matlab's path temporarily

- addNoise.m 
	Takes time-domain data and injects noise

- assessContig.m
	Inner loop of Frequency-Domain Fitting 

- place_PMU.m
	Takes PMU indices relative to buses i.e. Bus 1 and Bus 4 and returns PMU indices relative to complete system i.e. Idx 201 and Idx 204

- loadInstance.m
	Returns a data structure of type "Instance" taking in parameters, such as contingency and amount of noise to inject, as arguments

- runInstance.m
	Takes a data structure of type "Instance" and runs a contingency identification routine

- filter_eigenpairs.m
	Takes as input eigenpairs, and filters them based on frequency, dampening, or magnitude. 

- runN4SID.m
	Runs N4SID, making sure to set proper options

- normalizematrix.m
	Normalizes a matrix to have column-wise norm

- smoothData.m
	Moving average smoothing of time-domain data